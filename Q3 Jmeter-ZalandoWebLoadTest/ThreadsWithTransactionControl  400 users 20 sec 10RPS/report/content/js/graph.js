/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 247.0, "minX": 0.0, "maxY": 2302.0, "series": [{"data": [[0.0, 618.0], [0.1, 618.0], [0.2, 618.0], [0.3, 618.0], [0.4, 618.0], [0.5, 618.0], [0.6, 622.0], [0.7, 622.0], [0.8, 622.0], [0.9, 622.0], [1.0, 622.0], [1.1, 623.0], [1.2, 623.0], [1.3, 623.0], [1.4, 623.0], [1.5, 623.0], [1.6, 631.0], [1.7, 631.0], [1.8, 631.0], [1.9, 631.0], [2.0, 631.0], [2.1, 631.0], [2.2, 634.0], [2.3, 634.0], [2.4, 634.0], [2.5, 634.0], [2.6, 634.0], [2.7, 640.0], [2.8, 640.0], [2.9, 640.0], [3.0, 640.0], [3.1, 640.0], [3.2, 651.0], [3.3, 651.0], [3.4, 651.0], [3.5, 651.0], [3.6, 651.0], [3.7, 651.0], [3.8, 660.0], [3.9, 660.0], [4.0, 660.0], [4.1, 660.0], [4.2, 660.0], [4.3, 671.0], [4.4, 671.0], [4.5, 671.0], [4.6, 671.0], [4.7, 671.0], [4.8, 672.0], [4.9, 672.0], [5.0, 672.0], [5.1, 672.0], [5.2, 672.0], [5.3, 672.0], [5.4, 675.0], [5.5, 675.0], [5.6, 675.0], [5.7, 675.0], [5.8, 675.0], [5.9, 675.0], [6.0, 675.0], [6.1, 675.0], [6.2, 675.0], [6.3, 675.0], [6.4, 675.0], [6.5, 675.0], [6.6, 675.0], [6.7, 675.0], [6.8, 675.0], [6.9, 675.0], [7.0, 677.0], [7.1, 677.0], [7.2, 677.0], [7.3, 677.0], [7.4, 677.0], [7.5, 677.0], [7.6, 677.0], [7.7, 677.0], [7.8, 677.0], [7.9, 677.0], [8.0, 687.0], [8.1, 687.0], [8.2, 687.0], [8.3, 687.0], [8.4, 687.0], [8.5, 687.0], [8.6, 692.0], [8.7, 692.0], [8.8, 692.0], [8.9, 692.0], [9.0, 692.0], [9.1, 693.0], [9.2, 693.0], [9.3, 693.0], [9.4, 693.0], [9.5, 693.0], [9.6, 697.0], [9.7, 697.0], [9.8, 697.0], [9.9, 697.0], [10.0, 697.0], [10.1, 697.0], [10.2, 702.0], [10.3, 702.0], [10.4, 702.0], [10.5, 702.0], [10.6, 702.0], [10.7, 706.0], [10.8, 706.0], [10.9, 706.0], [11.0, 706.0], [11.1, 706.0], [11.2, 712.0], [11.3, 712.0], [11.4, 712.0], [11.5, 712.0], [11.6, 712.0], [11.7, 712.0], [11.8, 717.0], [11.9, 717.0], [12.0, 717.0], [12.1, 717.0], [12.2, 717.0], [12.3, 718.0], [12.4, 718.0], [12.5, 718.0], [12.6, 718.0], [12.7, 718.0], [12.8, 719.0], [12.9, 719.0], [13.0, 719.0], [13.1, 719.0], [13.2, 719.0], [13.3, 719.0], [13.4, 719.0], [13.5, 719.0], [13.6, 719.0], [13.7, 719.0], [13.8, 719.0], [13.9, 720.0], [14.0, 720.0], [14.1, 720.0], [14.2, 720.0], [14.3, 720.0], [14.4, 720.0], [14.5, 720.0], [14.6, 720.0], [14.7, 720.0], [14.8, 720.0], [14.9, 720.0], [15.0, 720.0], [15.1, 720.0], [15.2, 720.0], [15.3, 720.0], [15.4, 720.0], [15.5, 721.0], [15.6, 721.0], [15.7, 721.0], [15.8, 721.0], [15.9, 721.0], [16.0, 722.0], [16.1, 722.0], [16.2, 722.0], [16.3, 722.0], [16.4, 722.0], [16.5, 723.0], [16.6, 723.0], [16.7, 723.0], [16.8, 723.0], [16.9, 723.0], [17.0, 723.0], [17.1, 724.0], [17.2, 724.0], [17.3, 724.0], [17.4, 724.0], [17.5, 724.0], [17.6, 726.0], [17.7, 726.0], [17.8, 726.0], [17.9, 726.0], [18.0, 726.0], [18.1, 726.0], [18.2, 726.0], [18.3, 726.0], [18.4, 726.0], [18.5, 726.0], [18.6, 726.0], [18.7, 729.0], [18.8, 729.0], [18.9, 729.0], [19.0, 729.0], [19.1, 729.0], [19.2, 735.0], [19.3, 735.0], [19.4, 735.0], [19.5, 735.0], [19.6, 735.0], [19.7, 740.0], [19.8, 740.0], [19.9, 740.0], [20.0, 740.0], [20.1, 740.0], [20.2, 740.0], [20.3, 742.0], [20.4, 742.0], [20.5, 742.0], [20.6, 742.0], [20.7, 742.0], [20.8, 742.0], [20.9, 742.0], [21.0, 742.0], [21.1, 742.0], [21.2, 742.0], [21.3, 750.0], [21.4, 750.0], [21.5, 750.0], [21.6, 750.0], [21.7, 750.0], [21.8, 750.0], [21.9, 753.0], [22.0, 753.0], [22.1, 753.0], [22.2, 753.0], [22.3, 753.0], [22.4, 758.0], [22.5, 758.0], [22.6, 758.0], [22.7, 758.0], [22.8, 758.0], [22.9, 758.0], [23.0, 758.0], [23.1, 758.0], [23.2, 758.0], [23.3, 758.0], [23.4, 758.0], [23.5, 760.0], [23.6, 760.0], [23.7, 760.0], [23.8, 760.0], [23.9, 760.0], [24.0, 765.0], [24.1, 765.0], [24.2, 765.0], [24.3, 765.0], [24.4, 765.0], [24.5, 767.0], [24.6, 767.0], [24.7, 767.0], [24.8, 767.0], [24.9, 767.0], [25.0, 767.0], [25.1, 767.0], [25.2, 767.0], [25.3, 767.0], [25.4, 767.0], [25.5, 767.0], [25.6, 774.0], [25.7, 774.0], [25.8, 774.0], [25.9, 774.0], [26.0, 774.0], [26.1, 780.0], [26.2, 780.0], [26.3, 780.0], [26.4, 780.0], [26.5, 780.0], [26.6, 793.0], [26.7, 793.0], [26.8, 793.0], [26.9, 793.0], [27.0, 793.0], [27.1, 793.0], [27.2, 795.0], [27.3, 795.0], [27.4, 795.0], [27.5, 795.0], [27.6, 795.0], [27.7, 796.0], [27.8, 796.0], [27.9, 796.0], [28.0, 796.0], [28.1, 796.0], [28.2, 798.0], [28.3, 798.0], [28.4, 798.0], [28.5, 798.0], [28.6, 798.0], [28.7, 798.0], [28.8, 799.0], [28.9, 799.0], [29.0, 799.0], [29.1, 799.0], [29.2, 799.0], [29.3, 803.0], [29.4, 803.0], [29.5, 803.0], [29.6, 803.0], [29.7, 803.0], [29.8, 804.0], [29.9, 804.0], [30.0, 804.0], [30.1, 804.0], [30.2, 804.0], [30.3, 804.0], [30.4, 812.0], [30.5, 812.0], [30.6, 812.0], [30.7, 812.0], [30.8, 812.0], [30.9, 814.0], [31.0, 814.0], [31.1, 814.0], [31.2, 814.0], [31.3, 814.0], [31.4, 832.0], [31.5, 832.0], [31.6, 832.0], [31.7, 832.0], [31.8, 832.0], [31.9, 832.0], [32.0, 833.0], [32.1, 833.0], [32.2, 833.0], [32.3, 833.0], [32.4, 833.0], [32.5, 839.0], [32.6, 839.0], [32.7, 839.0], [32.8, 839.0], [32.9, 839.0], [33.0, 842.0], [33.1, 842.0], [33.2, 842.0], [33.3, 842.0], [33.4, 842.0], [33.5, 842.0], [33.6, 846.0], [33.7, 846.0], [33.8, 846.0], [33.9, 846.0], [34.0, 846.0], [34.1, 848.0], [34.2, 848.0], [34.3, 848.0], [34.4, 848.0], [34.5, 848.0], [34.6, 849.0], [34.7, 849.0], [34.8, 849.0], [34.9, 849.0], [35.0, 849.0], [35.1, 849.0], [35.2, 851.0], [35.3, 851.0], [35.4, 851.0], [35.5, 851.0], [35.6, 851.0], [35.7, 851.0], [35.8, 851.0], [35.9, 851.0], [36.0, 851.0], [36.1, 851.0], [36.2, 860.0], [36.3, 860.0], [36.4, 860.0], [36.5, 860.0], [36.6, 860.0], [36.7, 860.0], [36.8, 863.0], [36.9, 863.0], [37.0, 863.0], [37.1, 863.0], [37.2, 863.0], [37.3, 863.0], [37.4, 863.0], [37.5, 863.0], [37.6, 863.0], [37.7, 863.0], [37.8, 864.0], [37.9, 864.0], [38.0, 864.0], [38.1, 864.0], [38.2, 864.0], [38.3, 870.0], [38.4, 870.0], [38.5, 870.0], [38.6, 870.0], [38.7, 870.0], [38.8, 870.0], [38.9, 870.0], [39.0, 870.0], [39.1, 870.0], [39.2, 870.0], [39.3, 870.0], [39.4, 872.0], [39.5, 872.0], [39.6, 872.0], [39.7, 872.0], [39.8, 872.0], [39.9, 874.0], [40.0, 874.0], [40.1, 874.0], [40.2, 874.0], [40.3, 874.0], [40.4, 874.0], [40.5, 874.0], [40.6, 874.0], [40.7, 874.0], [40.8, 874.0], [40.9, 874.0], [41.0, 878.0], [41.1, 878.0], [41.2, 878.0], [41.3, 878.0], [41.4, 878.0], [41.5, 879.0], [41.6, 879.0], [41.7, 879.0], [41.8, 879.0], [41.9, 879.0], [42.0, 879.0], [42.1, 880.0], [42.2, 880.0], [42.3, 880.0], [42.4, 880.0], [42.5, 880.0], [42.6, 883.0], [42.7, 883.0], [42.8, 883.0], [42.9, 883.0], [43.0, 883.0], [43.1, 884.0], [43.2, 884.0], [43.3, 884.0], [43.4, 884.0], [43.5, 884.0], [43.6, 884.0], [43.7, 892.0], [43.8, 892.0], [43.9, 892.0], [44.0, 892.0], [44.1, 892.0], [44.2, 895.0], [44.3, 895.0], [44.4, 895.0], [44.5, 895.0], [44.6, 895.0], [44.7, 899.0], [44.8, 899.0], [44.9, 899.0], [45.0, 899.0], [45.1, 899.0], [45.2, 899.0], [45.3, 908.0], [45.4, 908.0], [45.5, 908.0], [45.6, 908.0], [45.7, 908.0], [45.8, 909.0], [45.9, 909.0], [46.0, 909.0], [46.1, 909.0], [46.2, 909.0], [46.3, 918.0], [46.4, 918.0], [46.5, 918.0], [46.6, 918.0], [46.7, 918.0], [46.8, 918.0], [46.9, 925.0], [47.0, 925.0], [47.1, 925.0], [47.2, 925.0], [47.3, 925.0], [47.4, 927.0], [47.5, 927.0], [47.6, 927.0], [47.7, 927.0], [47.8, 927.0], [47.9, 930.0], [48.0, 930.0], [48.1, 930.0], [48.2, 930.0], [48.3, 930.0], [48.4, 930.0], [48.5, 932.0], [48.6, 932.0], [48.7, 932.0], [48.8, 932.0], [48.9, 932.0], [49.0, 937.0], [49.1, 937.0], [49.2, 937.0], [49.3, 937.0], [49.4, 937.0], [49.5, 945.0], [49.6, 945.0], [49.7, 945.0], [49.8, 945.0], [49.9, 945.0], [50.0, 956.0], [50.1, 956.0], [50.2, 956.0], [50.3, 956.0], [50.4, 956.0], [50.5, 956.0], [50.6, 956.0], [50.7, 956.0], [50.8, 956.0], [50.9, 956.0], [51.0, 956.0], [51.1, 965.0], [51.2, 965.0], [51.3, 965.0], [51.4, 965.0], [51.5, 965.0], [51.6, 967.0], [51.7, 967.0], [51.8, 967.0], [51.9, 967.0], [52.0, 967.0], [52.1, 967.0], [52.2, 969.0], [52.3, 969.0], [52.4, 969.0], [52.5, 969.0], [52.6, 969.0], [52.7, 970.0], [52.8, 970.0], [52.9, 970.0], [53.0, 970.0], [53.1, 970.0], [53.2, 981.0], [53.3, 981.0], [53.4, 981.0], [53.5, 981.0], [53.6, 981.0], [53.7, 981.0], [53.8, 986.0], [53.9, 986.0], [54.0, 986.0], [54.1, 986.0], [54.2, 986.0], [54.3, 988.0], [54.4, 988.0], [54.5, 988.0], [54.6, 988.0], [54.7, 988.0], [54.8, 989.0], [54.9, 989.0], [55.0, 989.0], [55.1, 989.0], [55.2, 989.0], [55.3, 989.0], [55.4, 989.0], [55.5, 989.0], [55.6, 989.0], [55.7, 989.0], [55.8, 989.0], [55.9, 990.0], [56.0, 990.0], [56.1, 990.0], [56.2, 990.0], [56.3, 990.0], [56.4, 1004.0], [56.5, 1004.0], [56.6, 1004.0], [56.7, 1004.0], [56.8, 1004.0], [56.9, 1004.0], [57.0, 1005.0], [57.1, 1005.0], [57.2, 1005.0], [57.3, 1005.0], [57.4, 1005.0], [57.5, 1014.0], [57.6, 1014.0], [57.7, 1014.0], [57.8, 1014.0], [57.9, 1014.0], [58.0, 1019.0], [58.1, 1019.0], [58.2, 1019.0], [58.3, 1019.0], [58.4, 1019.0], [58.5, 1019.0], [58.6, 1030.0], [58.7, 1030.0], [58.8, 1030.0], [58.9, 1030.0], [59.0, 1030.0], [59.1, 1035.0], [59.2, 1035.0], [59.3, 1035.0], [59.4, 1035.0], [59.5, 1035.0], [59.6, 1043.0], [59.7, 1043.0], [59.8, 1043.0], [59.9, 1043.0], [60.0, 1043.0], [60.1, 1043.0], [60.2, 1046.0], [60.3, 1046.0], [60.4, 1046.0], [60.5, 1046.0], [60.6, 1046.0], [60.7, 1048.0], [60.8, 1048.0], [60.9, 1048.0], [61.0, 1048.0], [61.1, 1048.0], [61.2, 1050.0], [61.3, 1050.0], [61.4, 1050.0], [61.5, 1050.0], [61.6, 1050.0], [61.7, 1050.0], [61.8, 1051.0], [61.9, 1051.0], [62.0, 1051.0], [62.1, 1051.0], [62.2, 1051.0], [62.3, 1053.0], [62.4, 1053.0], [62.5, 1053.0], [62.6, 1053.0], [62.7, 1053.0], [62.8, 1060.0], [62.9, 1060.0], [63.0, 1060.0], [63.1, 1060.0], [63.2, 1060.0], [63.3, 1069.0], [63.4, 1069.0], [63.5, 1069.0], [63.6, 1069.0], [63.7, 1069.0], [63.8, 1069.0], [63.9, 1071.0], [64.0, 1071.0], [64.1, 1071.0], [64.2, 1071.0], [64.3, 1071.0], [64.4, 1076.0], [64.5, 1076.0], [64.6, 1076.0], [64.7, 1076.0], [64.8, 1076.0], [64.9, 1082.0], [65.0, 1082.0], [65.1, 1082.0], [65.2, 1082.0], [65.3, 1082.0], [65.4, 1082.0], [65.5, 1090.0], [65.6, 1090.0], [65.7, 1090.0], [65.8, 1090.0], [65.9, 1090.0], [66.0, 1091.0], [66.1, 1091.0], [66.2, 1091.0], [66.3, 1091.0], [66.4, 1091.0], [66.5, 1092.0], [66.6, 1092.0], [66.7, 1092.0], [66.8, 1092.0], [66.9, 1092.0], [67.0, 1092.0], [67.1, 1103.0], [67.2, 1103.0], [67.3, 1103.0], [67.4, 1103.0], [67.5, 1103.0], [67.6, 1109.0], [67.7, 1109.0], [67.8, 1109.0], [67.9, 1109.0], [68.0, 1109.0], [68.1, 1111.0], [68.2, 1111.0], [68.3, 1111.0], [68.4, 1111.0], [68.5, 1111.0], [68.6, 1111.0], [68.7, 1112.0], [68.8, 1112.0], [68.9, 1112.0], [69.0, 1112.0], [69.1, 1112.0], [69.2, 1118.0], [69.3, 1118.0], [69.4, 1118.0], [69.5, 1118.0], [69.6, 1118.0], [69.7, 1155.0], [69.8, 1155.0], [69.9, 1155.0], [70.0, 1155.0], [70.1, 1155.0], [70.2, 1155.0], [70.3, 1160.0], [70.4, 1160.0], [70.5, 1160.0], [70.6, 1160.0], [70.7, 1160.0], [70.8, 1168.0], [70.9, 1168.0], [71.0, 1168.0], [71.1, 1168.0], [71.2, 1168.0], [71.3, 1175.0], [71.4, 1175.0], [71.5, 1175.0], [71.6, 1175.0], [71.7, 1175.0], [71.8, 1175.0], [71.9, 1185.0], [72.0, 1185.0], [72.1, 1185.0], [72.2, 1185.0], [72.3, 1185.0], [72.4, 1189.0], [72.5, 1189.0], [72.6, 1189.0], [72.7, 1189.0], [72.8, 1189.0], [72.9, 1200.0], [73.0, 1200.0], [73.1, 1200.0], [73.2, 1200.0], [73.3, 1200.0], [73.4, 1200.0], [73.5, 1205.0], [73.6, 1205.0], [73.7, 1205.0], [73.8, 1205.0], [73.9, 1205.0], [74.0, 1212.0], [74.1, 1212.0], [74.2, 1212.0], [74.3, 1212.0], [74.4, 1212.0], [74.5, 1218.0], [74.6, 1218.0], [74.7, 1218.0], [74.8, 1218.0], [74.9, 1218.0], [75.0, 1218.0], [75.1, 1220.0], [75.2, 1220.0], [75.3, 1220.0], [75.4, 1220.0], [75.5, 1220.0], [75.6, 1220.0], [75.7, 1220.0], [75.8, 1220.0], [75.9, 1220.0], [76.0, 1220.0], [76.1, 1221.0], [76.2, 1221.0], [76.3, 1221.0], [76.4, 1221.0], [76.5, 1221.0], [76.6, 1250.0], [76.7, 1250.0], [76.8, 1250.0], [76.9, 1250.0], [77.0, 1250.0], [77.1, 1250.0], [77.2, 1257.0], [77.3, 1257.0], [77.4, 1257.0], [77.5, 1257.0], [77.6, 1257.0], [77.7, 1257.0], [77.8, 1257.0], [77.9, 1257.0], [78.0, 1257.0], [78.1, 1257.0], [78.2, 1269.0], [78.3, 1269.0], [78.4, 1269.0], [78.5, 1269.0], [78.6, 1269.0], [78.7, 1269.0], [78.8, 1274.0], [78.9, 1274.0], [79.0, 1274.0], [79.1, 1274.0], [79.2, 1274.0], [79.3, 1279.0], [79.4, 1279.0], [79.5, 1279.0], [79.6, 1279.0], [79.7, 1279.0], [79.8, 1293.0], [79.9, 1293.0], [80.0, 1293.0], [80.1, 1293.0], [80.2, 1293.0], [80.3, 1293.0], [80.4, 1295.0], [80.5, 1295.0], [80.6, 1295.0], [80.7, 1295.0], [80.8, 1295.0], [80.9, 1307.0], [81.0, 1307.0], [81.1, 1307.0], [81.2, 1307.0], [81.3, 1307.0], [81.4, 1311.0], [81.5, 1311.0], [81.6, 1311.0], [81.7, 1311.0], [81.8, 1311.0], [81.9, 1311.0], [82.0, 1316.0], [82.1, 1316.0], [82.2, 1316.0], [82.3, 1316.0], [82.4, 1316.0], [82.5, 1316.0], [82.6, 1316.0], [82.7, 1316.0], [82.8, 1316.0], [82.9, 1316.0], [83.0, 1338.0], [83.1, 1338.0], [83.2, 1338.0], [83.3, 1338.0], [83.4, 1338.0], [83.5, 1338.0], [83.6, 1368.0], [83.7, 1368.0], [83.8, 1368.0], [83.9, 1368.0], [84.0, 1368.0], [84.1, 1374.0], [84.2, 1374.0], [84.3, 1374.0], [84.4, 1374.0], [84.5, 1374.0], [84.6, 1378.0], [84.7, 1378.0], [84.8, 1378.0], [84.9, 1378.0], [85.0, 1378.0], [85.1, 1378.0], [85.2, 1380.0], [85.3, 1380.0], [85.4, 1380.0], [85.5, 1380.0], [85.6, 1380.0], [85.7, 1385.0], [85.8, 1385.0], [85.9, 1385.0], [86.0, 1385.0], [86.1, 1385.0], [86.2, 1390.0], [86.3, 1390.0], [86.4, 1390.0], [86.5, 1390.0], [86.6, 1390.0], [86.7, 1390.0], [86.8, 1390.0], [86.9, 1390.0], [87.0, 1390.0], [87.1, 1390.0], [87.2, 1390.0], [87.3, 1390.0], [87.4, 1390.0], [87.5, 1390.0], [87.6, 1390.0], [87.7, 1390.0], [87.8, 1403.0], [87.9, 1403.0], [88.0, 1403.0], [88.1, 1403.0], [88.2, 1403.0], [88.3, 1406.0], [88.4, 1406.0], [88.5, 1406.0], [88.6, 1406.0], [88.7, 1406.0], [88.8, 1406.0], [88.9, 1416.0], [89.0, 1416.0], [89.1, 1416.0], [89.2, 1416.0], [89.3, 1416.0], [89.4, 1435.0], [89.5, 1435.0], [89.6, 1435.0], [89.7, 1435.0], [89.8, 1435.0], [89.9, 1435.0], [90.0, 1435.0], [90.1, 1435.0], [90.2, 1435.0], [90.3, 1435.0], [90.4, 1435.0], [90.5, 1442.0], [90.6, 1442.0], [90.7, 1442.0], [90.8, 1442.0], [90.9, 1442.0], [91.0, 1456.0], [91.1, 1456.0], [91.2, 1456.0], [91.3, 1456.0], [91.4, 1456.0], [91.5, 1459.0], [91.6, 1459.0], [91.7, 1459.0], [91.8, 1459.0], [91.9, 1459.0], [92.0, 1459.0], [92.1, 1459.0], [92.2, 1459.0], [92.3, 1459.0], [92.4, 1459.0], [92.5, 1459.0], [92.6, 1508.0], [92.7, 1508.0], [92.8, 1508.0], [92.9, 1508.0], [93.0, 1508.0], [93.1, 1538.0], [93.2, 1538.0], [93.3, 1538.0], [93.4, 1538.0], [93.5, 1538.0], [93.6, 1538.0], [93.7, 1558.0], [93.8, 1558.0], [93.9, 1558.0], [94.0, 1558.0], [94.1, 1558.0], [94.2, 1572.0], [94.3, 1572.0], [94.4, 1572.0], [94.5, 1572.0], [94.6, 1572.0], [94.7, 1644.0], [94.8, 1644.0], [94.9, 1644.0], [95.0, 1644.0], [95.1, 1644.0], [95.2, 1644.0], [95.3, 1651.0], [95.4, 1651.0], [95.5, 1651.0], [95.6, 1651.0], [95.7, 1651.0], [95.8, 1677.0], [95.9, 1677.0], [96.0, 1677.0], [96.1, 1677.0], [96.2, 1677.0], [96.3, 1684.0], [96.4, 1684.0], [96.5, 1684.0], [96.6, 1684.0], [96.7, 1684.0], [96.8, 1684.0], [96.9, 1735.0], [97.0, 1735.0], [97.1, 1735.0], [97.2, 1735.0], [97.3, 1735.0], [97.4, 1739.0], [97.5, 1739.0], [97.6, 1739.0], [97.7, 1739.0], [97.8, 1739.0], [97.9, 1774.0], [98.0, 1774.0], [98.1, 1774.0], [98.2, 1774.0], [98.3, 1774.0], [98.4, 1774.0], [98.5, 1888.0], [98.6, 1888.0], [98.7, 1888.0], [98.8, 1888.0], [98.9, 1888.0], [99.0, 2102.0], [99.1, 2102.0], [99.2, 2102.0], [99.3, 2102.0], [99.4, 2102.0], [99.5, 2302.0], [99.6, 2302.0], [99.7, 2302.0], [99.8, 2302.0], [99.9, 2302.0], [100.0, 2302.0]], "isOverall": false, "label": "Zalando Home Page", "isController": false}, {"data": [[0.0, 247.0], [0.1, 247.0], [0.2, 247.0], [0.3, 247.0], [0.4, 247.0], [0.5, 247.0], [0.6, 247.0], [0.7, 247.0], [0.8, 247.0], [0.9, 247.0], [1.0, 247.0], [1.1, 252.0], [1.2, 252.0], [1.3, 252.0], [1.4, 252.0], [1.5, 252.0], [1.6, 252.0], [1.7, 252.0], [1.8, 252.0], [1.9, 252.0], [2.0, 252.0], [2.1, 255.0], [2.2, 255.0], [2.3, 255.0], [2.4, 255.0], [2.5, 255.0], [2.6, 255.0], [2.7, 255.0], [2.8, 255.0], [2.9, 255.0], [3.0, 255.0], [3.1, 255.0], [3.2, 259.0], [3.3, 259.0], [3.4, 259.0], [3.5, 259.0], [3.6, 259.0], [3.7, 259.0], [3.8, 259.0], [3.9, 259.0], [4.0, 259.0], [4.1, 259.0], [4.2, 262.0], [4.3, 262.0], [4.4, 262.0], [4.5, 262.0], [4.6, 262.0], [4.7, 262.0], [4.8, 262.0], [4.9, 262.0], [5.0, 262.0], [5.1, 262.0], [5.2, 262.0], [5.3, 262.0], [5.4, 262.0], [5.5, 262.0], [5.6, 262.0], [5.7, 262.0], [5.8, 262.0], [5.9, 262.0], [6.0, 262.0], [6.1, 262.0], [6.2, 262.0], [6.3, 266.0], [6.4, 266.0], [6.5, 266.0], [6.6, 266.0], [6.7, 266.0], [6.8, 266.0], [6.9, 266.0], [7.0, 266.0], [7.1, 266.0], [7.2, 266.0], [7.3, 270.0], [7.4, 270.0], [7.5, 270.0], [7.6, 270.0], [7.7, 270.0], [7.8, 270.0], [7.9, 270.0], [8.0, 270.0], [8.1, 270.0], [8.2, 270.0], [8.3, 270.0], [8.4, 271.0], [8.5, 271.0], [8.6, 271.0], [8.7, 271.0], [8.8, 271.0], [8.9, 271.0], [9.0, 271.0], [9.1, 271.0], [9.2, 271.0], [9.3, 271.0], [9.4, 271.0], [9.5, 271.0], [9.6, 271.0], [9.7, 271.0], [9.8, 271.0], [9.9, 271.0], [10.0, 271.0], [10.1, 271.0], [10.2, 271.0], [10.3, 271.0], [10.4, 271.0], [10.5, 273.0], [10.6, 273.0], [10.7, 273.0], [10.8, 273.0], [10.9, 273.0], [11.0, 273.0], [11.1, 273.0], [11.2, 273.0], [11.3, 273.0], [11.4, 273.0], [11.5, 276.0], [11.6, 276.0], [11.7, 276.0], [11.8, 276.0], [11.9, 276.0], [12.0, 276.0], [12.1, 276.0], [12.2, 276.0], [12.3, 276.0], [12.4, 276.0], [12.5, 276.0], [12.6, 276.0], [12.7, 276.0], [12.8, 276.0], [12.9, 276.0], [13.0, 276.0], [13.1, 276.0], [13.2, 276.0], [13.3, 276.0], [13.4, 276.0], [13.5, 276.0], [13.6, 284.0], [13.7, 284.0], [13.8, 284.0], [13.9, 284.0], [14.0, 284.0], [14.1, 284.0], [14.2, 284.0], [14.3, 284.0], [14.4, 284.0], [14.5, 284.0], [14.6, 286.0], [14.7, 286.0], [14.8, 286.0], [14.9, 286.0], [15.0, 286.0], [15.1, 286.0], [15.2, 286.0], [15.3, 286.0], [15.4, 286.0], [15.5, 286.0], [15.6, 286.0], [15.7, 290.0], [15.8, 290.0], [15.9, 290.0], [16.0, 290.0], [16.1, 290.0], [16.2, 290.0], [16.3, 290.0], [16.4, 290.0], [16.5, 290.0], [16.6, 290.0], [16.7, 295.0], [16.8, 295.0], [16.9, 295.0], [17.0, 295.0], [17.1, 295.0], [17.2, 295.0], [17.3, 295.0], [17.4, 295.0], [17.5, 295.0], [17.6, 295.0], [17.7, 295.0], [17.8, 296.0], [17.9, 296.0], [18.0, 296.0], [18.1, 296.0], [18.2, 296.0], [18.3, 296.0], [18.4, 296.0], [18.5, 296.0], [18.6, 296.0], [18.7, 296.0], [18.8, 297.0], [18.9, 297.0], [19.0, 297.0], [19.1, 297.0], [19.2, 297.0], [19.3, 297.0], [19.4, 297.0], [19.5, 297.0], [19.6, 297.0], [19.7, 297.0], [19.8, 302.0], [19.9, 302.0], [20.0, 302.0], [20.1, 302.0], [20.2, 302.0], [20.3, 302.0], [20.4, 302.0], [20.5, 302.0], [20.6, 302.0], [20.7, 302.0], [20.8, 302.0], [20.9, 303.0], [21.0, 303.0], [21.1, 303.0], [21.2, 303.0], [21.3, 303.0], [21.4, 303.0], [21.5, 303.0], [21.6, 303.0], [21.7, 303.0], [21.8, 303.0], [21.9, 304.0], [22.0, 304.0], [22.1, 304.0], [22.2, 304.0], [22.3, 304.0], [22.4, 304.0], [22.5, 304.0], [22.6, 304.0], [22.7, 304.0], [22.8, 304.0], [22.9, 304.0], [23.0, 305.0], [23.1, 305.0], [23.2, 305.0], [23.3, 305.0], [23.4, 305.0], [23.5, 305.0], [23.6, 305.0], [23.7, 305.0], [23.8, 305.0], [23.9, 305.0], [24.0, 307.0], [24.1, 307.0], [24.2, 307.0], [24.3, 307.0], [24.4, 307.0], [24.5, 307.0], [24.6, 307.0], [24.7, 307.0], [24.8, 307.0], [24.9, 307.0], [25.0, 307.0], [25.1, 307.0], [25.2, 307.0], [25.3, 307.0], [25.4, 307.0], [25.5, 307.0], [25.6, 307.0], [25.7, 307.0], [25.8, 307.0], [25.9, 307.0], [26.0, 307.0], [26.1, 310.0], [26.2, 310.0], [26.3, 310.0], [26.4, 310.0], [26.5, 310.0], [26.6, 310.0], [26.7, 310.0], [26.8, 310.0], [26.9, 310.0], [27.0, 310.0], [27.1, 315.0], [27.2, 315.0], [27.3, 315.0], [27.4, 315.0], [27.5, 315.0], [27.6, 315.0], [27.7, 315.0], [27.8, 315.0], [27.9, 315.0], [28.0, 315.0], [28.1, 315.0], [28.2, 323.0], [28.3, 323.0], [28.4, 323.0], [28.5, 323.0], [28.6, 323.0], [28.7, 323.0], [28.8, 323.0], [28.9, 323.0], [29.0, 323.0], [29.1, 323.0], [29.2, 325.0], [29.3, 325.0], [29.4, 325.0], [29.5, 325.0], [29.6, 325.0], [29.7, 325.0], [29.8, 325.0], [29.9, 325.0], [30.0, 325.0], [30.1, 325.0], [30.2, 325.0], [30.3, 331.0], [30.4, 331.0], [30.5, 331.0], [30.6, 331.0], [30.7, 331.0], [30.8, 331.0], [30.9, 331.0], [31.0, 331.0], [31.1, 331.0], [31.2, 331.0], [31.3, 334.0], [31.4, 334.0], [31.5, 334.0], [31.6, 334.0], [31.7, 334.0], [31.8, 334.0], [31.9, 334.0], [32.0, 334.0], [32.1, 334.0], [32.2, 334.0], [32.3, 335.0], [32.4, 335.0], [32.5, 335.0], [32.6, 335.0], [32.7, 335.0], [32.8, 335.0], [32.9, 335.0], [33.0, 335.0], [33.1, 335.0], [33.2, 335.0], [33.3, 335.0], [33.4, 339.0], [33.5, 339.0], [33.6, 339.0], [33.7, 339.0], [33.8, 339.0], [33.9, 339.0], [34.0, 339.0], [34.1, 339.0], [34.2, 339.0], [34.3, 339.0], [34.4, 341.0], [34.5, 341.0], [34.6, 341.0], [34.7, 341.0], [34.8, 341.0], [34.9, 341.0], [35.0, 341.0], [35.1, 341.0], [35.2, 341.0], [35.3, 341.0], [35.4, 341.0], [35.5, 344.0], [35.6, 344.0], [35.7, 344.0], [35.8, 344.0], [35.9, 344.0], [36.0, 344.0], [36.1, 344.0], [36.2, 344.0], [36.3, 344.0], [36.4, 344.0], [36.5, 345.0], [36.6, 345.0], [36.7, 345.0], [36.8, 345.0], [36.9, 345.0], [37.0, 345.0], [37.1, 345.0], [37.2, 345.0], [37.3, 345.0], [37.4, 345.0], [37.5, 356.0], [37.6, 356.0], [37.7, 356.0], [37.8, 356.0], [37.9, 356.0], [38.0, 356.0], [38.1, 356.0], [38.2, 356.0], [38.3, 356.0], [38.4, 356.0], [38.5, 356.0], [38.6, 356.0], [38.7, 356.0], [38.8, 356.0], [38.9, 356.0], [39.0, 356.0], [39.1, 356.0], [39.2, 356.0], [39.3, 356.0], [39.4, 356.0], [39.5, 356.0], [39.6, 356.0], [39.7, 356.0], [39.8, 356.0], [39.9, 356.0], [40.0, 356.0], [40.1, 356.0], [40.2, 356.0], [40.3, 356.0], [40.4, 356.0], [40.5, 356.0], [40.6, 356.0], [40.7, 358.0], [40.8, 358.0], [40.9, 358.0], [41.0, 358.0], [41.1, 358.0], [41.2, 358.0], [41.3, 358.0], [41.4, 358.0], [41.5, 358.0], [41.6, 358.0], [41.7, 360.0], [41.8, 360.0], [41.9, 360.0], [42.0, 360.0], [42.1, 360.0], [42.2, 360.0], [42.3, 360.0], [42.4, 360.0], [42.5, 360.0], [42.6, 360.0], [42.7, 360.0], [42.8, 360.0], [42.9, 360.0], [43.0, 360.0], [43.1, 360.0], [43.2, 360.0], [43.3, 360.0], [43.4, 360.0], [43.5, 360.0], [43.6, 360.0], [43.7, 360.0], [43.8, 360.0], [43.9, 360.0], [44.0, 360.0], [44.1, 360.0], [44.2, 360.0], [44.3, 360.0], [44.4, 360.0], [44.5, 360.0], [44.6, 360.0], [44.7, 360.0], [44.8, 370.0], [44.9, 370.0], [45.0, 370.0], [45.1, 370.0], [45.2, 370.0], [45.3, 370.0], [45.4, 370.0], [45.5, 370.0], [45.6, 370.0], [45.7, 370.0], [45.8, 370.0], [45.9, 372.0], [46.0, 372.0], [46.1, 372.0], [46.2, 372.0], [46.3, 372.0], [46.4, 372.0], [46.5, 372.0], [46.6, 372.0], [46.7, 372.0], [46.8, 372.0], [46.9, 376.0], [47.0, 376.0], [47.1, 376.0], [47.2, 376.0], [47.3, 376.0], [47.4, 376.0], [47.5, 376.0], [47.6, 376.0], [47.7, 376.0], [47.8, 376.0], [47.9, 376.0], [48.0, 377.0], [48.1, 377.0], [48.2, 377.0], [48.3, 377.0], [48.4, 377.0], [48.5, 377.0], [48.6, 377.0], [48.7, 377.0], [48.8, 377.0], [48.9, 377.0], [49.0, 379.0], [49.1, 379.0], [49.2, 379.0], [49.3, 379.0], [49.4, 379.0], [49.5, 379.0], [49.6, 379.0], [49.7, 379.0], [49.8, 379.0], [49.9, 379.0], [50.0, 380.0], [50.1, 380.0], [50.2, 380.0], [50.3, 380.0], [50.4, 380.0], [50.5, 380.0], [50.6, 380.0], [50.7, 380.0], [50.8, 380.0], [50.9, 380.0], [51.0, 380.0], [51.1, 382.0], [51.2, 382.0], [51.3, 382.0], [51.4, 382.0], [51.5, 382.0], [51.6, 382.0], [51.7, 382.0], [51.8, 382.0], [51.9, 382.0], [52.0, 382.0], [52.1, 384.0], [52.2, 384.0], [52.3, 384.0], [52.4, 384.0], [52.5, 384.0], [52.6, 384.0], [52.7, 384.0], [52.8, 384.0], [52.9, 384.0], [53.0, 384.0], [53.1, 384.0], [53.2, 385.0], [53.3, 385.0], [53.4, 385.0], [53.5, 385.0], [53.6, 385.0], [53.7, 385.0], [53.8, 385.0], [53.9, 385.0], [54.0, 385.0], [54.1, 385.0], [54.2, 388.0], [54.3, 388.0], [54.4, 388.0], [54.5, 388.0], [54.6, 388.0], [54.7, 388.0], [54.8, 388.0], [54.9, 388.0], [55.0, 388.0], [55.1, 388.0], [55.2, 388.0], [55.3, 390.0], [55.4, 390.0], [55.5, 390.0], [55.6, 390.0], [55.7, 390.0], [55.8, 390.0], [55.9, 390.0], [56.0, 390.0], [56.1, 390.0], [56.2, 390.0], [56.3, 393.0], [56.4, 393.0], [56.5, 393.0], [56.6, 393.0], [56.7, 393.0], [56.8, 393.0], [56.9, 393.0], [57.0, 393.0], [57.1, 393.0], [57.2, 393.0], [57.3, 404.0], [57.4, 404.0], [57.5, 404.0], [57.6, 404.0], [57.7, 404.0], [57.8, 404.0], [57.9, 404.0], [58.0, 404.0], [58.1, 404.0], [58.2, 404.0], [58.3, 404.0], [58.4, 405.0], [58.5, 405.0], [58.6, 405.0], [58.7, 405.0], [58.8, 405.0], [58.9, 405.0], [59.0, 405.0], [59.1, 405.0], [59.2, 405.0], [59.3, 405.0], [59.4, 406.0], [59.5, 406.0], [59.6, 406.0], [59.7, 406.0], [59.8, 406.0], [59.9, 406.0], [60.0, 406.0], [60.1, 406.0], [60.2, 406.0], [60.3, 406.0], [60.4, 406.0], [60.5, 408.0], [60.6, 408.0], [60.7, 408.0], [60.8, 408.0], [60.9, 408.0], [61.0, 408.0], [61.1, 408.0], [61.2, 408.0], [61.3, 408.0], [61.4, 408.0], [61.5, 409.0], [61.6, 409.0], [61.7, 409.0], [61.8, 409.0], [61.9, 409.0], [62.0, 409.0], [62.1, 409.0], [62.2, 409.0], [62.3, 409.0], [62.4, 409.0], [62.5, 410.0], [62.6, 410.0], [62.7, 410.0], [62.8, 410.0], [62.9, 410.0], [63.0, 410.0], [63.1, 410.0], [63.2, 410.0], [63.3, 410.0], [63.4, 410.0], [63.5, 410.0], [63.6, 413.0], [63.7, 413.0], [63.8, 413.0], [63.9, 413.0], [64.0, 413.0], [64.1, 413.0], [64.2, 413.0], [64.3, 413.0], [64.4, 413.0], [64.5, 413.0], [64.6, 419.0], [64.7, 419.0], [64.8, 419.0], [64.9, 419.0], [65.0, 419.0], [65.1, 419.0], [65.2, 419.0], [65.3, 419.0], [65.4, 419.0], [65.5, 419.0], [65.6, 419.0], [65.7, 420.0], [65.8, 420.0], [65.9, 420.0], [66.0, 420.0], [66.1, 420.0], [66.2, 420.0], [66.3, 420.0], [66.4, 420.0], [66.5, 420.0], [66.6, 420.0], [66.7, 424.0], [66.8, 424.0], [66.9, 424.0], [67.0, 424.0], [67.1, 424.0], [67.2, 424.0], [67.3, 424.0], [67.4, 424.0], [67.5, 424.0], [67.6, 424.0], [67.7, 424.0], [67.8, 428.0], [67.9, 428.0], [68.0, 428.0], [68.1, 428.0], [68.2, 428.0], [68.3, 428.0], [68.4, 428.0], [68.5, 428.0], [68.6, 428.0], [68.7, 428.0], [68.8, 432.0], [68.9, 432.0], [69.0, 432.0], [69.1, 432.0], [69.2, 432.0], [69.3, 432.0], [69.4, 432.0], [69.5, 432.0], [69.6, 432.0], [69.7, 432.0], [69.8, 436.0], [69.9, 436.0], [70.0, 436.0], [70.1, 436.0], [70.2, 436.0], [70.3, 436.0], [70.4, 436.0], [70.5, 436.0], [70.6, 436.0], [70.7, 436.0], [70.8, 436.0], [70.9, 438.0], [71.0, 438.0], [71.1, 438.0], [71.2, 438.0], [71.3, 438.0], [71.4, 438.0], [71.5, 438.0], [71.6, 438.0], [71.7, 438.0], [71.8, 438.0], [71.9, 444.0], [72.0, 444.0], [72.1, 444.0], [72.2, 444.0], [72.3, 444.0], [72.4, 444.0], [72.5, 444.0], [72.6, 444.0], [72.7, 444.0], [72.8, 444.0], [72.9, 444.0], [73.0, 445.0], [73.1, 445.0], [73.2, 445.0], [73.3, 445.0], [73.4, 445.0], [73.5, 445.0], [73.6, 445.0], [73.7, 445.0], [73.8, 445.0], [73.9, 445.0], [74.0, 453.0], [74.1, 453.0], [74.2, 453.0], [74.3, 453.0], [74.4, 453.0], [74.5, 453.0], [74.6, 453.0], [74.7, 453.0], [74.8, 453.0], [74.9, 453.0], [75.0, 457.0], [75.1, 457.0], [75.2, 457.0], [75.3, 457.0], [75.4, 457.0], [75.5, 457.0], [75.6, 457.0], [75.7, 457.0], [75.8, 457.0], [75.9, 457.0], [76.0, 457.0], [76.1, 459.0], [76.2, 459.0], [76.3, 459.0], [76.4, 459.0], [76.5, 459.0], [76.6, 459.0], [76.7, 459.0], [76.8, 459.0], [76.9, 459.0], [77.0, 459.0], [77.1, 461.0], [77.2, 461.0], [77.3, 461.0], [77.4, 461.0], [77.5, 461.0], [77.6, 461.0], [77.7, 461.0], [77.8, 461.0], [77.9, 461.0], [78.0, 461.0], [78.1, 461.0], [78.2, 464.0], [78.3, 464.0], [78.4, 464.0], [78.5, 464.0], [78.6, 464.0], [78.7, 464.0], [78.8, 464.0], [78.9, 464.0], [79.0, 464.0], [79.1, 464.0], [79.2, 469.0], [79.3, 469.0], [79.4, 469.0], [79.5, 469.0], [79.6, 469.0], [79.7, 469.0], [79.8, 469.0], [79.9, 469.0], [80.0, 469.0], [80.1, 469.0], [80.2, 469.0], [80.3, 471.0], [80.4, 471.0], [80.5, 471.0], [80.6, 471.0], [80.7, 471.0], [80.8, 471.0], [80.9, 471.0], [81.0, 471.0], [81.1, 471.0], [81.2, 471.0], [81.3, 475.0], [81.4, 475.0], [81.5, 475.0], [81.6, 475.0], [81.7, 475.0], [81.8, 475.0], [81.9, 475.0], [82.0, 475.0], [82.1, 475.0], [82.2, 475.0], [82.3, 484.0], [82.4, 484.0], [82.5, 484.0], [82.6, 484.0], [82.7, 484.0], [82.8, 484.0], [82.9, 484.0], [83.0, 484.0], [83.1, 484.0], [83.2, 484.0], [83.3, 484.0], [83.4, 492.0], [83.5, 492.0], [83.6, 492.0], [83.7, 492.0], [83.8, 492.0], [83.9, 492.0], [84.0, 492.0], [84.1, 492.0], [84.2, 492.0], [84.3, 492.0], [84.4, 497.0], [84.5, 497.0], [84.6, 497.0], [84.7, 497.0], [84.8, 497.0], [84.9, 497.0], [85.0, 497.0], [85.1, 497.0], [85.2, 497.0], [85.3, 497.0], [85.4, 497.0], [85.5, 500.0], [85.6, 500.0], [85.7, 500.0], [85.8, 500.0], [85.9, 500.0], [86.0, 500.0], [86.1, 500.0], [86.2, 500.0], [86.3, 500.0], [86.4, 500.0], [86.5, 502.0], [86.6, 502.0], [86.7, 502.0], [86.8, 502.0], [86.9, 502.0], [87.0, 502.0], [87.1, 502.0], [87.2, 502.0], [87.3, 502.0], [87.4, 502.0], [87.5, 502.0], [87.6, 502.0], [87.7, 502.0], [87.8, 502.0], [87.9, 502.0], [88.0, 502.0], [88.1, 502.0], [88.2, 502.0], [88.3, 502.0], [88.4, 502.0], [88.5, 502.0], [88.6, 519.0], [88.7, 519.0], [88.8, 519.0], [88.9, 519.0], [89.0, 519.0], [89.1, 519.0], [89.2, 519.0], [89.3, 519.0], [89.4, 519.0], [89.5, 519.0], [89.6, 520.0], [89.7, 520.0], [89.8, 520.0], [89.9, 520.0], [90.0, 520.0], [90.1, 520.0], [90.2, 520.0], [90.3, 520.0], [90.4, 520.0], [90.5, 520.0], [90.6, 520.0], [90.7, 521.0], [90.8, 521.0], [90.9, 521.0], [91.0, 521.0], [91.1, 521.0], [91.2, 521.0], [91.3, 521.0], [91.4, 521.0], [91.5, 521.0], [91.6, 521.0], [91.7, 553.0], [91.8, 553.0], [91.9, 553.0], [92.0, 553.0], [92.1, 553.0], [92.2, 553.0], [92.3, 553.0], [92.4, 553.0], [92.5, 553.0], [92.6, 553.0], [92.7, 553.0], [92.8, 554.0], [92.9, 554.0], [93.0, 554.0], [93.1, 554.0], [93.2, 554.0], [93.3, 554.0], [93.4, 554.0], [93.5, 554.0], [93.6, 554.0], [93.7, 554.0], [93.8, 555.0], [93.9, 555.0], [94.0, 555.0], [94.1, 555.0], [94.2, 555.0], [94.3, 555.0], [94.4, 555.0], [94.5, 555.0], [94.6, 555.0], [94.7, 555.0], [94.8, 555.0], [94.9, 555.0], [95.0, 555.0], [95.1, 555.0], [95.2, 555.0], [95.3, 555.0], [95.4, 555.0], [95.5, 555.0], [95.6, 555.0], [95.7, 555.0], [95.8, 555.0], [95.9, 614.0], [96.0, 614.0], [96.1, 614.0], [96.2, 614.0], [96.3, 614.0], [96.4, 614.0], [96.5, 614.0], [96.6, 614.0], [96.7, 614.0], [96.8, 614.0], [96.9, 623.0], [97.0, 623.0], [97.1, 623.0], [97.2, 623.0], [97.3, 623.0], [97.4, 623.0], [97.5, 623.0], [97.6, 623.0], [97.7, 623.0], [97.8, 623.0], [97.9, 623.0], [98.0, 639.0], [98.1, 639.0], [98.2, 639.0], [98.3, 639.0], [98.4, 639.0], [98.5, 639.0], [98.6, 639.0], [98.7, 639.0], [98.8, 639.0], [98.9, 639.0], [99.0, 706.0], [99.1, 706.0], [99.2, 706.0], [99.3, 706.0], [99.4, 706.0], [99.5, 706.0], [99.6, 706.0], [99.7, 706.0], [99.8, 706.0], [99.9, 706.0], [100.0, 706.0]], "isOverall": false, "label": "Search for jeans", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 36.0, "series": [{"data": [[2100.0, 1.0], [2300.0, 1.0], [600.0, 19.0], [700.0, 36.0], [800.0, 30.0], [900.0, 21.0], [1000.0, 20.0], [1100.0, 11.0], [1200.0, 15.0], [1300.0, 13.0], [1400.0, 9.0], [1500.0, 4.0], [1600.0, 4.0], [1700.0, 3.0], [1800.0, 1.0]], "isOverall": false, "label": "Zalando Home Page", "isController": false}, {"data": [[300.0, 36.0], [600.0, 3.0], [700.0, 1.0], [200.0, 19.0], [400.0, 27.0], [500.0, 10.0]], "isOverall": false, "label": "Search for jeans", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 186.0, "series": [{"data": [[0.0, 83.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 186.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 14.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 40.0, "minX": 1.612006746E12, "maxY": 400.0, "series": [{"data": [[1.61200678E12, 400.0], [1.612006822E12, 400.0], [1.612006824E12, 400.0], [1.612006782E12, 400.0], [1.612006784E12, 400.0], [1.612006774E12, 400.0], [1.612006776E12, 400.0], [1.612006818E12, 400.0], [1.61200682E12, 400.0], [1.612006778E12, 400.0], [1.612006812E12, 400.0], [1.61200677E12, 400.0], [1.612006772E12, 400.0], [1.612006814E12, 400.0], [1.612006816E12, 400.0], [1.612006764E12, 400.0], [1.612006806E12, 400.0], [1.612006808E12, 400.0], [1.612006766E12, 400.0], [1.612006768E12, 400.0], [1.61200681E12, 400.0], [1.612006758E12, 280.0], [1.61200676E12, 313.1666666666667], [1.612006802E12, 400.0], [1.612006804E12, 400.0], [1.612006762E12, 350.0], [1.612006796E12, 400.0], [1.61200684E12, 400.0], [1.612006754E12, 200.0], [1.612006756E12, 240.0], [1.612006798E12, 400.0], [1.6120068E12, 400.0], [1.612006748E12, 80.0], [1.61200679E12, 400.0], [1.612006792E12, 400.0], [1.61200675E12, 120.0], [1.612006752E12, 160.0], [1.612006794E12, 400.0], [1.612006786E12, 400.0], [1.612006788E12, 400.0], [1.612006746E12, 40.0]], "isOverall": false, "label": "ThreadsWithTransactionControl-ThreadStarter", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.61200684E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 259.0, "minX": 40.0, "maxY": 1126.0, "series": [{"data": [[280.0, 716.0], [40.0, 1126.0], [80.0, 677.0], [160.0, 723.0], [320.0, 746.0], [360.0, 726.0], [200.0, 724.0], [400.0, 1052.1893491124254], [120.0, 660.0], [240.0, 756.6666666666666]], "isOverall": false, "label": "Zalando Home Page", "isController": false}, {"data": [[381.27659574468066, 1023.0691489361701]], "isOverall": false, "label": "Zalando Home Page-Aggregated", "isController": false}, {"data": [[317.0, 259.0], [80.0, 502.0], [320.0, 307.0], [360.0, 284.0], [200.0, 271.0], [400.0, 396.8275862068965], [120.0, 296.0], [240.0, 492.0]], "isOverall": false, "label": "Search for jeans", "isController": false}, {"data": [[386.63541666666663, 390.8958333333333]], "isOverall": false, "label": "Search for jeans-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.612006746E12, "maxY": 5995164.0, "series": [{"data": [[1.61200678E12, 2631831.0], [1.612006822E12, 1460162.0], [1.612006824E12, 209797.0], [1.612006782E12, 3355395.0], [1.612006784E12, 3259516.5], [1.612006774E12, 2155517.0], [1.612006776E12, 3888883.5], [1.612006818E12, 209797.0], [1.61200682E12, 1669831.0], [1.612006778E12, 2329304.5], [1.612006812E12, 3527644.5], [1.61200677E12, 2442229.5], [1.612006772E12, 1417443.5], [1.612006814E12, 3166479.5], [1.612006816E12, 3872115.0], [1.612006764E12, 2175733.0], [1.612006806E12, 4504543.5], [1.612006808E12, 5995164.0], [1.612006766E12, 1942028.0], [1.612006768E12, 2403952.0], [1.61200681E12, 3673714.0], [1.612006758E12, 1505740.0], [1.61200676E12, 2130184.0], [1.612006802E12, 5207135.0], [1.612006804E12, 5264785.5], [1.612006762E12, 1401003.5], [1.612006796E12, 3538898.5], [1.61200684E12, 1575.0], [1.612006754E12, 734618.0], [1.612006756E12, 1705438.5], [1.612006798E12, 5109438.0], [1.6120068E12, 5875063.5], [1.612006748E12, 716229.5], [1.61200679E12, 4319448.0], [1.612006792E12, 3174506.0], [1.61200675E12, 1216544.5], [1.612006752E12, 1000966.5], [1.612006794E12, 5653502.5], [1.612006786E12, 4699489.0], [1.612006788E12, 2647676.5], [1.612006746E12, 1007376.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61200678E12, 373.5], [1.612006822E12, 251.0], [1.612006824E12, 63.5], [1.612006782E12, 564.0], [1.612006784E12, 435.5], [1.612006774E12, 311.5], [1.612006776E12, 561.0], [1.612006818E12, 63.5], [1.61200682E12, 249.5], [1.612006778E12, 440.0], [1.612006812E12, 627.5], [1.61200677E12, 375.0], [1.612006772E12, 251.0], [1.612006814E12, 435.5], [1.612006816E12, 626.0], [1.612006764E12, 311.5], [1.612006806E12, 751.5], [1.612006808E12, 872.5], [1.612006766E12, 313.0], [1.612006768E12, 375.0], [1.61200681E12, 562.5], [1.612006758E12, 186.0], [1.61200676E12, 376.5], [1.612006802E12, 877.0], [1.612006804E12, 683.5], [1.612006762E12, 251.0], [1.612006796E12, 627.5], [1.61200684E12, 0.0], [1.612006754E12, 125.5], [1.612006756E12, 249.5], [1.612006798E12, 748.5], [1.6120068E12, 809.0], [1.612006748E12, 125.5], [1.61200679E12, 688.0], [1.612006792E12, 629.0], [1.61200675E12, 187.5], [1.612006752E12, 124.0], [1.612006794E12, 810.5], [1.612006786E12, 815.0], [1.612006788E12, 438.5], [1.612006746E12, 124.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.61200684E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 252.0, "minX": 1.612006746E12, "maxY": 1568.6666666666667, "series": [{"data": [[1.61200678E12, 1008.8], [1.612006822E12, 789.0], [1.612006782E12, 825.0], [1.612006784E12, 848.3333333333334], [1.612006774E12, 1045.5], [1.612006776E12, 1179.4285714285716], [1.61200682E12, 774.6666666666666], [1.612006778E12, 927.6666666666666], [1.612006812E12, 887.2], [1.61200677E12, 748.5], [1.612006772E12, 996.5], [1.612006814E12, 924.5], [1.612006816E12, 830.6666666666666], [1.612006764E12, 731.75], [1.612006806E12, 1018.2857142857142], [1.612006808E12, 1297.4545454545457], [1.612006766E12, 786.3333333333334], [1.612006768E12, 739.0], [1.61200681E12, 1084.5], [1.612006758E12, 723.6666666666666], [1.61200676E12, 711.6666666666666], [1.612006802E12, 1178.625], [1.612006804E12, 1139.5], [1.612006762E12, 761.0], [1.612006796E12, 1105.4], [1.61200684E12, 640.0], [1.612006754E12, 724.0], [1.612006756E12, 756.6666666666666], [1.612006798E12, 1568.6666666666667], [1.6120068E12, 1282.7272727272727], [1.612006748E12, 677.0], [1.61200679E12, 996.0000000000001], [1.612006792E12, 933.25], [1.61200675E12, 660.0], [1.612006752E12, 723.0], [1.612006794E12, 1079.1], [1.612006786E12, 1143.7142857142858], [1.612006788E12, 903.5], [1.612006746E12, 1126.0]], "isOverall": false, "label": "Zalando Home Page", "isController": false}, {"data": [[1.61200678E12, 276.0], [1.612006822E12, 357.0], [1.612006824E12, 252.0], [1.612006782E12, 389.75], [1.612006784E12, 424.0], [1.612006774E12, 325.0], [1.612006776E12, 612.5], [1.612006818E12, 335.0], [1.61200682E12, 385.0], [1.612006778E12, 454.5], [1.612006812E12, 394.6], [1.61200677E12, 269.0], [1.612006772E12, 300.0], [1.612006814E12, 384.0], [1.612006816E12, 337.25], [1.612006764E12, 310.0], [1.612006806E12, 472.4], [1.612006808E12, 491.3333333333333], [1.612006766E12, 305.5], [1.612006768E12, 259.0], [1.61200681E12, 515.0], [1.61200676E12, 291.0], [1.612006802E12, 437.83333333333337], [1.612006804E12, 380.0], [1.612006762E12, 284.0], [1.612006796E12, 401.0], [1.612006754E12, 271.0], [1.612006756E12, 492.0], [1.612006798E12, 379.6666666666667], [1.6120068E12, 537.5], [1.612006748E12, 502.0], [1.61200679E12, 349.75], [1.612006792E12, 338.5], [1.61200675E12, 296.0], [1.612006794E12, 380.0], [1.612006786E12, 379.1666666666667], [1.612006788E12, 492.0]], "isOverall": false, "label": "Search for jeans", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.61200684E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 90.5, "minX": 1.612006746E12, "maxY": 507.0, "series": [{"data": [[1.61200678E12, 147.8], [1.612006822E12, 114.5], [1.612006782E12, 128.4], [1.612006784E12, 147.0], [1.612006774E12, 145.0], [1.612006776E12, 147.71428571428572], [1.61200682E12, 102.66666666666667], [1.612006778E12, 119.33333333333333], [1.612006812E12, 180.0], [1.61200677E12, 117.0], [1.612006772E12, 118.5], [1.612006814E12, 135.66666666666669], [1.612006816E12, 143.16666666666666], [1.612006764E12, 122.5], [1.612006806E12, 203.57142857142858], [1.612006808E12, 230.9090909090909], [1.612006766E12, 113.33333333333333], [1.612006768E12, 114.0], [1.61200681E12, 172.5], [1.612006758E12, 113.33333333333333], [1.61200676E12, 108.33333333333333], [1.612006802E12, 192.0], [1.612006804E12, 181.9], [1.612006762E12, 154.0], [1.612006796E12, 136.0], [1.61200684E12, 101.0], [1.612006754E12, 162.0], [1.612006756E12, 132.33333333333334], [1.612006798E12, 242.33333333333331], [1.6120068E12, 249.1818181818182], [1.612006748E12, 173.0], [1.61200679E12, 181.42857142857144], [1.612006792E12, 153.5], [1.61200675E12, 90.5], [1.612006752E12, 108.5], [1.612006794E12, 189.5], [1.612006786E12, 214.28571428571428], [1.612006788E12, 154.25], [1.612006746E12, 507.0]], "isOverall": false, "label": "Zalando Home Page", "isController": false}, {"data": [[1.61200678E12, 200.0], [1.612006822E12, 292.5], [1.612006824E12, 194.0], [1.612006782E12, 293.25], [1.612006784E12, 238.0], [1.612006774E12, 193.0], [1.612006776E12, 315.5], [1.612006818E12, 275.0], [1.61200682E12, 263.0], [1.612006778E12, 254.0], [1.612006812E12, 253.4], [1.61200677E12, 207.0], [1.612006772E12, 255.5], [1.612006814E12, 204.0], [1.612006816E12, 241.0], [1.612006764E12, 252.0], [1.612006806E12, 294.8], [1.612006808E12, 299.0], [1.612006766E12, 245.0], [1.612006768E12, 199.0], [1.61200681E12, 269.6666666666667], [1.61200676E12, 222.33333333333334], [1.612006802E12, 261.5], [1.612006804E12, 243.0], [1.612006762E12, 221.0], [1.612006796E12, 233.0], [1.612006754E12, 211.0], [1.612006756E12, 429.0], [1.612006798E12, 233.66666666666666], [1.6120068E12, 297.0], [1.612006748E12, 444.0], [1.61200679E12, 255.5], [1.612006792E12, 232.16666666666666], [1.61200675E12, 236.0], [1.612006794E12, 255.33333333333334], [1.612006786E12, 281.8333333333333], [1.612006788E12, 271.6666666666667]], "isOverall": false, "label": "Search for jeans", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.61200684E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.612006746E12, "maxY": 411.0, "series": [{"data": [[1.61200678E12, 96.6], [1.612006822E12, 59.5], [1.612006782E12, 59.6], [1.612006784E12, 65.0], [1.612006774E12, 82.5], [1.612006776E12, 88.0], [1.61200682E12, 52.666666666666664], [1.612006778E12, 69.0], [1.612006812E12, 116.2], [1.61200677E12, 53.0], [1.612006772E12, 67.0], [1.612006814E12, 62.0], [1.612006816E12, 76.66666666666667], [1.612006764E12, 59.25], [1.612006806E12, 117.85714285714286], [1.612006808E12, 145.45454545454547], [1.612006766E12, 60.666666666666664], [1.612006768E12, 53.75], [1.61200681E12, 112.83333333333334], [1.612006758E12, 61.666666666666664], [1.61200676E12, 56.333333333333336], [1.612006802E12, 97.0], [1.612006804E12, 98.7], [1.612006762E12, 84.5], [1.612006796E12, 70.6], [1.61200684E12, 56.0], [1.612006754E12, 66.0], [1.612006756E12, 53.0], [1.612006798E12, 170.77777777777777], [1.6120068E12, 136.0], [1.612006748E12, 64.0], [1.61200679E12, 95.85714285714286], [1.612006792E12, 64.0], [1.61200675E12, 46.0], [1.612006752E12, 62.0], [1.612006794E12, 91.1], [1.612006786E12, 119.71428571428571], [1.612006788E12, 96.5], [1.612006746E12, 411.0]], "isOverall": false, "label": "Zalando Home Page", "isController": false}, {"data": [[1.61200678E12, 0.0], [1.612006822E12, 0.0], [1.612006824E12, 0.0], [1.612006782E12, 0.0], [1.612006784E12, 0.0], [1.612006774E12, 0.0], [1.612006776E12, 0.0], [1.612006818E12, 0.0], [1.61200682E12, 0.0], [1.612006778E12, 0.0], [1.612006812E12, 0.0], [1.61200677E12, 0.0], [1.612006772E12, 0.0], [1.612006814E12, 0.0], [1.612006816E12, 0.0], [1.612006764E12, 0.0], [1.612006806E12, 0.0], [1.612006808E12, 0.0], [1.612006766E12, 0.0], [1.612006768E12, 0.0], [1.61200681E12, 0.0], [1.61200676E12, 0.0], [1.612006802E12, 0.0], [1.612006804E12, 0.0], [1.612006762E12, 0.0], [1.612006796E12, 0.0], [1.612006754E12, 0.0], [1.612006756E12, 0.0], [1.612006798E12, 0.0], [1.6120068E12, 0.0], [1.612006748E12, 0.0], [1.61200679E12, 0.0], [1.612006792E12, 0.0], [1.61200675E12, 0.0], [1.612006794E12, 0.0], [1.612006786E12, 0.0], [1.612006788E12, 0.0]], "isOverall": false, "label": "Search for jeans", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.61200684E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 247.0, "minX": 1.612006746E12, "maxY": 2302.0, "series": [{"data": [[1.61200678E12, 1378.0], [1.612006822E12, 804.0], [1.612006824E12, 252.0], [1.612006782E12, 989.0], [1.612006784E12, 1112.0], [1.612006774E12, 1390.0], [1.612006776E12, 1385.0], [1.612006818E12, 335.0], [1.61200682E12, 895.0], [1.612006778E12, 1185.0], [1.612006812E12, 1109.0], [1.61200677E12, 892.0], [1.612006772E12, 1005.0], [1.612006814E12, 1307.0], [1.612006816E12, 1046.0], [1.612006764E12, 870.0], [1.612006806E12, 1459.0], [1.612006808E12, 1684.0], [1.612006766E12, 870.0], [1.612006768E12, 884.0], [1.61200681E12, 1257.0], [1.612006758E12, 760.0], [1.61200676E12, 767.0], [1.612006802E12, 1651.0], [1.612006804E12, 1888.0], [1.612006762E12, 796.0], [1.612006796E12, 1538.0], [1.612006754E12, 724.0], [1.612006756E12, 874.0], [1.612006798E12, 2102.0], [1.6120068E12, 2302.0], [1.612006748E12, 677.0], [1.61200679E12, 1456.0], [1.612006792E12, 1459.0], [1.61200675E12, 697.0], [1.612006752E12, 795.0], [1.612006794E12, 1390.0], [1.612006786E12, 1442.0], [1.612006788E12, 1118.0], [1.612006746E12, 1403.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61200678E12, 1378.0], [1.612006822E12, 804.0], [1.612006824E12, 252.0], [1.612006782E12, 989.0], [1.612006784E12, 1112.0], [1.612006774E12, 1390.0], [1.612006776E12, 1385.0], [1.612006818E12, 335.0], [1.61200682E12, 895.0], [1.612006778E12, 1185.0], [1.612006812E12, 1101.1], [1.61200677E12, 892.0], [1.612006772E12, 1005.0], [1.612006814E12, 1307.0], [1.612006816E12, 1034.4], [1.612006764E12, 870.0], [1.612006806E12, 1354.6000000000004], [1.612006808E12, 1628.0], [1.612006766E12, 870.0], [1.612006768E12, 884.0], [1.61200681E12, 1257.0], [1.612006758E12, 760.0], [1.61200676E12, 767.0], [1.612006802E12, 1465.0], [1.612006804E12, 1784.0000000000005], [1.612006762E12, 796.0], [1.612006796E12, 1515.8000000000002], [1.612006754E12, 724.0], [1.612006756E12, 874.0], [1.612006798E12, 2003.6000000000004], [1.6120068E12, 2076.7999999999997], [1.612006748E12, 677.0], [1.61200679E12, 1451.8], [1.612006792E12, 1397.7000000000003], [1.61200675E12, 697.0], [1.612006752E12, 795.0], [1.612006794E12, 1383.6], [1.612006786E12, 1427.6], [1.612006788E12, 1118.0], [1.612006746E12, 1403.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61200678E12, 1378.0], [1.612006822E12, 804.0], [1.612006824E12, 252.0], [1.612006782E12, 989.0], [1.612006784E12, 1112.0], [1.612006774E12, 1390.0], [1.612006776E12, 1385.0], [1.612006818E12, 335.0], [1.61200682E12, 895.0], [1.612006778E12, 1185.0], [1.612006812E12, 1109.0], [1.61200677E12, 892.0], [1.612006772E12, 1005.0], [1.612006814E12, 1307.0], [1.612006816E12, 1046.0], [1.612006764E12, 870.0], [1.612006806E12, 1459.0], [1.612006808E12, 1684.0], [1.612006766E12, 870.0], [1.612006768E12, 884.0], [1.61200681E12, 1257.0], [1.612006758E12, 760.0], [1.61200676E12, 767.0], [1.612006802E12, 1651.0], [1.612006804E12, 1888.0], [1.612006762E12, 796.0], [1.612006796E12, 1538.0], [1.612006754E12, 724.0], [1.612006756E12, 874.0], [1.612006798E12, 2102.0], [1.6120068E12, 2302.0], [1.612006748E12, 677.0], [1.61200679E12, 1456.0], [1.612006792E12, 1459.0], [1.61200675E12, 697.0], [1.612006752E12, 795.0], [1.612006794E12, 1390.0], [1.612006786E12, 1442.0], [1.612006788E12, 1118.0], [1.612006746E12, 1403.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61200678E12, 1378.0], [1.612006822E12, 804.0], [1.612006824E12, 252.0], [1.612006782E12, 989.0], [1.612006784E12, 1112.0], [1.612006774E12, 1390.0], [1.612006776E12, 1385.0], [1.612006818E12, 335.0], [1.61200682E12, 895.0], [1.612006778E12, 1185.0], [1.612006812E12, 1109.0], [1.61200677E12, 892.0], [1.612006772E12, 1005.0], [1.612006814E12, 1307.0], [1.612006816E12, 1046.0], [1.612006764E12, 870.0], [1.612006806E12, 1459.0], [1.612006808E12, 1684.0], [1.612006766E12, 870.0], [1.612006768E12, 884.0], [1.61200681E12, 1257.0], [1.612006758E12, 760.0], [1.61200676E12, 767.0], [1.612006802E12, 1651.0], [1.612006804E12, 1888.0], [1.612006762E12, 796.0], [1.612006796E12, 1538.0], [1.612006754E12, 724.0], [1.612006756E12, 874.0], [1.612006798E12, 2102.0], [1.6120068E12, 2302.0], [1.612006748E12, 677.0], [1.61200679E12, 1456.0], [1.612006792E12, 1459.0], [1.61200675E12, 697.0], [1.612006752E12, 795.0], [1.612006794E12, 1390.0], [1.612006786E12, 1442.0], [1.612006788E12, 1118.0], [1.612006746E12, 1403.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61200678E12, 276.0], [1.612006822E12, 304.0], [1.612006824E12, 252.0], [1.612006782E12, 266.0], [1.612006784E12, 424.0], [1.612006774E12, 325.0], [1.612006776E12, 519.0], [1.612006818E12, 335.0], [1.61200682E12, 385.0], [1.612006778E12, 305.0], [1.612006812E12, 302.0], [1.61200677E12, 262.0], [1.612006772E12, 297.0], [1.612006814E12, 384.0], [1.612006816E12, 290.0], [1.612006764E12, 310.0], [1.612006806E12, 379.0], [1.612006808E12, 469.0], [1.612006766E12, 255.0], [1.612006768E12, 247.0], [1.61200681E12, 377.0], [1.612006758E12, 671.0], [1.61200676E12, 259.0], [1.612006802E12, 358.0], [1.612006804E12, 380.0], [1.612006762E12, 273.0], [1.612006796E12, 341.0], [1.612006754E12, 271.0], [1.612006756E12, 492.0], [1.612006798E12, 345.0], [1.6120068E12, 436.0], [1.612006748E12, 502.0], [1.61200679E12, 284.0], [1.612006792E12, 262.0], [1.61200675E12, 296.0], [1.612006752E12, 651.0], [1.612006794E12, 307.0], [1.612006786E12, 286.0], [1.612006788E12, 409.0], [1.612006746E12, 849.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61200678E12, 823.5], [1.612006822E12, 592.0], [1.612006824E12, 252.0], [1.612006782E12, 712.0], [1.612006784E12, 765.0], [1.612006774E12, 860.0], [1.612006776E12, 1168.0], [1.612006818E12, 335.0], [1.61200682E12, 714.5], [1.612006778E12, 555.0], [1.612006812E12, 546.0], [1.61200677E12, 676.0], [1.612006772E12, 645.5], [1.612006814E12, 833.0], [1.612006816E12, 682.0], [1.612006764E12, 702.0], [1.612006806E12, 778.0], [1.612006808E12, 1166.0], [1.612006766E12, 675.0], [1.612006768E12, 668.5], [1.61200681E12, 956.0], [1.612006758E12, 740.0], [1.61200676E12, 509.5], [1.612006802E12, 978.5], [1.612006804E12, 1050.0], [1.612006762E12, 510.5], [1.612006796E12, 602.0], [1.612006754E12, 497.5], [1.612006756E12, 698.0], [1.612006798E12, 1382.5], [1.6120068E12, 1092.0], [1.612006748E12, 589.5], [1.61200679E12, 753.0], [1.612006792E12, 371.0], [1.61200675E12, 623.0], [1.612006752E12, 723.0], [1.612006794E12, 932.0], [1.612006786E12, 965.0], [1.612006788E12, 720.0], [1.612006746E12, 1126.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.612006824E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 637.0, "minX": 1.0, "maxY": 1048.0, "series": [{"data": [[2.0, 699.5], [1.0, 637.0], [4.0, 936.0], [8.0, 995.0], [5.0, 720.0], [3.0, 690.0], [6.0, 869.0], [7.0, 1048.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 640.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 101.0, "minX": 1.0, "maxY": 245.0, "series": [{"data": [[2.0, 156.5], [1.0, 167.5], [4.0, 173.5], [8.0, 245.0], [5.0, 210.0], [3.0, 121.0], [6.0, 224.0], [7.0, 218.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 101.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.612006744E12, "maxY": 8.0, "series": [{"data": [[1.61200678E12, 1.0], [1.612006822E12, 2.0], [1.612006824E12, 0.5], [1.612006782E12, 5.5], [1.612006784E12, 5.0], [1.612006774E12, 3.0], [1.612006776E12, 2.5], [1.612006818E12, 2.0], [1.61200682E12, 0.5], [1.612006778E12, 5.0], [1.612006812E12, 5.5], [1.61200677E12, 2.0], [1.612006772E12, 4.0], [1.612006814E12, 3.0], [1.612006816E12, 3.5], [1.612006764E12, 2.0], [1.612006806E12, 7.0], [1.612006808E12, 4.5], [1.612006766E12, 2.5], [1.612006768E12, 3.5], [1.61200681E12, 4.5], [1.612006758E12, 2.0], [1.61200676E12, 2.5], [1.612006802E12, 7.0], [1.612006804E12, 6.0], [1.612006762E12, 2.5], [1.612006796E12, 8.0], [1.61200684E12, 0.5], [1.612006754E12, 1.5], [1.612006756E12, 2.0], [1.612006798E12, 5.5], [1.6120068E12, 5.5], [1.612006748E12, 1.0], [1.61200679E12, 4.0], [1.612006792E12, 7.0], [1.61200675E12, 1.5], [1.612006752E12, 0.5], [1.612006794E12, 4.5], [1.612006744E12, 0.5], [1.612006786E12, 5.0], [1.612006788E12, 5.0], [1.612006746E12, 1.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.61200684E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.612006746E12, "maxY": 7.0, "series": [{"data": [[1.61200678E12, 3.0], [1.612006822E12, 2.0], [1.612006824E12, 0.5], [1.612006782E12, 4.5], [1.612006784E12, 3.5], [1.612006774E12, 2.5], [1.612006776E12, 4.5], [1.612006818E12, 0.5], [1.61200682E12, 2.0], [1.612006778E12, 3.5], [1.612006812E12, 5.0], [1.61200677E12, 3.0], [1.612006772E12, 2.0], [1.612006814E12, 3.5], [1.612006816E12, 5.0], [1.612006764E12, 2.5], [1.612006806E12, 6.0], [1.612006808E12, 7.0], [1.612006766E12, 2.5], [1.612006768E12, 3.0], [1.61200681E12, 4.5], [1.612006758E12, 1.5], [1.61200676E12, 3.0], [1.612006802E12, 7.0], [1.612006804E12, 5.5], [1.612006762E12, 2.0], [1.612006796E12, 5.0], [1.612006754E12, 1.0], [1.612006756E12, 2.0], [1.612006798E12, 6.0], [1.6120068E12, 6.5], [1.612006748E12, 1.0], [1.61200679E12, 5.5], [1.612006792E12, 5.0], [1.61200675E12, 1.5], [1.612006752E12, 1.0], [1.612006794E12, 6.5], [1.612006786E12, 6.5], [1.612006788E12, 3.5], [1.612006746E12, 1.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.61200684E12, 0.5]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLProtocolException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.61200684E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.612006746E12, "maxY": 5.5, "series": [{"data": [[1.61200678E12, 0.5], [1.612006822E12, 1.0], [1.612006824E12, 0.5], [1.612006782E12, 2.0], [1.612006784E12, 0.5], [1.612006774E12, 0.5], [1.612006776E12, 1.0], [1.612006818E12, 0.5], [1.61200682E12, 0.5], [1.612006778E12, 2.0], [1.612006812E12, 2.5], [1.61200677E12, 1.0], [1.612006772E12, 1.0], [1.612006814E12, 0.5], [1.612006816E12, 2.0], [1.612006764E12, 0.5], [1.612006806E12, 2.5], [1.612006808E12, 1.5], [1.612006766E12, 1.0], [1.612006768E12, 1.0], [1.61200681E12, 1.5], [1.61200676E12, 1.5], [1.612006802E12, 3.0], [1.612006804E12, 0.5], [1.612006762E12, 1.0], [1.612006796E12, 2.5], [1.612006754E12, 0.5], [1.612006756E12, 0.5], [1.612006798E12, 1.5], [1.6120068E12, 1.0], [1.612006748E12, 0.5], [1.61200679E12, 2.0], [1.612006792E12, 3.0], [1.61200675E12, 0.5], [1.612006794E12, 1.5], [1.612006786E12, 3.0], [1.612006788E12, 1.5]], "isOverall": false, "label": "Search for jeans-success", "isController": false}, {"data": [[1.61200678E12, 2.5], [1.612006822E12, 1.0], [1.612006782E12, 2.5], [1.612006784E12, 3.0], [1.612006774E12, 2.0], [1.612006776E12, 3.5], [1.61200682E12, 1.5], [1.612006778E12, 1.5], [1.612006812E12, 2.5], [1.61200677E12, 2.0], [1.612006772E12, 1.0], [1.612006814E12, 3.0], [1.612006816E12, 3.0], [1.612006764E12, 2.0], [1.612006806E12, 3.5], [1.612006808E12, 5.5], [1.612006766E12, 1.5], [1.612006768E12, 2.0], [1.61200681E12, 3.0], [1.612006758E12, 1.5], [1.61200676E12, 1.5], [1.612006802E12, 4.0], [1.612006804E12, 5.0], [1.612006762E12, 1.0], [1.612006796E12, 2.5], [1.612006754E12, 0.5], [1.612006756E12, 1.5], [1.612006798E12, 4.5], [1.6120068E12, 5.5], [1.612006748E12, 0.5], [1.61200679E12, 3.5], [1.612006792E12, 2.0], [1.61200675E12, 1.0], [1.612006752E12, 1.0], [1.612006794E12, 5.0], [1.612006786E12, 3.5], [1.612006788E12, 2.0], [1.612006746E12, 1.0]], "isOverall": false, "label": "Zalando Home Page-success", "isController": false}, {"data": [[1.61200684E12, 0.5]], "isOverall": false, "label": "Zalando Home Page-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.61200684E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.612006746E12, "maxY": 7.0, "series": [{"data": [[1.61200678E12, 3.0], [1.612006822E12, 2.0], [1.612006824E12, 0.5], [1.612006782E12, 4.5], [1.612006784E12, 3.5], [1.612006774E12, 2.5], [1.612006776E12, 4.5], [1.612006818E12, 0.5], [1.61200682E12, 2.0], [1.612006778E12, 3.5], [1.612006812E12, 5.0], [1.61200677E12, 3.0], [1.612006772E12, 2.0], [1.612006814E12, 3.5], [1.612006816E12, 5.0], [1.612006764E12, 2.5], [1.612006806E12, 6.0], [1.612006808E12, 7.0], [1.612006766E12, 2.5], [1.612006768E12, 3.0], [1.61200681E12, 4.5], [1.612006758E12, 1.5], [1.61200676E12, 3.0], [1.612006802E12, 7.0], [1.612006804E12, 5.5], [1.612006762E12, 2.0], [1.612006796E12, 5.0], [1.612006754E12, 1.0], [1.612006756E12, 2.0], [1.612006798E12, 6.0], [1.6120068E12, 6.5], [1.612006748E12, 1.0], [1.61200679E12, 5.5], [1.612006792E12, 5.0], [1.61200675E12, 1.5], [1.612006752E12, 1.0], [1.612006794E12, 6.5], [1.612006786E12, 6.5], [1.612006788E12, 3.5], [1.612006746E12, 1.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.61200684E12, 0.5]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.61200684E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

